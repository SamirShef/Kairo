name: CI

on:
  push:
#    tags:
#      - '*'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install LLVM 20
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        echo "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main" | sudo tee /etc/apt/sources.list.d/llvm.list
        sudo apt-get update
        sudo apt-get install -y llvm-20-dev clang-20

    - name: Create Build Directory
      run: mkdir -p build

    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=$(llvm-config-20 --cmakedir)

    - name: Build
      run: cmake --build build --config Release

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Ensure LLVM is on PATH (preinstalled on runner)
      shell: pwsh
      run: echo "C:\\Program Files\\LLVM\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Show LLVM version
      shell: pwsh
      run: |
        & "C:\\Program Files\\LLVM\\bin\\clang.exe" --version

    - name: Create Build Directory
      run: cmake -E make_directory build

    - name: Configure CMake (MSVC)
      shell: pwsh
      run: |
        $llvmCMakeDir = $null
        $llvmConfig = Get-Command llvm-config.exe -ErrorAction SilentlyContinue
        if ($llvmConfig) {
          try {
            $llvmCMakeDir = & $llvmConfig.Source --cmakedir
          } catch {}
        }

        if (-not $llvmCMakeDir -or -not (Test-Path (Join-Path $llvmCMakeDir 'LLVMConfig.cmake'))) {
          $candidates = @(
            "C:\\Program Files\\LLVM\\lib\\cmake\\llvm",
            "C:\\Program Files (x86)\\LLVM\\lib\\cmake\\llvm"
          )
          foreach ($c in $candidates) {
            if (Test-Path (Join-Path $c 'LLVMConfig.cmake')) { $llvmCMakeDir = $c; break }
          }
        }

        if (-not $llvmCMakeDir -or -not (Test-Path (Join-Path $llvmCMakeDir 'LLVMConfig.cmake'))) {
          $toolcache = 'C:\\hostedtoolcache\\windows\\LLVM'
          if (Test-Path $toolcache) {
            $match = Get-ChildItem -Path $toolcache -Recurse -Filter LLVMConfig.cmake -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($match) { $llvmCMakeDir = $match.DirectoryName }
          }
        }

        if (-not $llvmCMakeDir -or -not (Test-Path (Join-Path $llvmCMakeDir 'LLVMConfig.cmake'))) {
          Write-Error "Failed to locate LLVMConfig.cmake. Checked llvm-config, Program Files, and toolcache."
        }

        Write-Host "Using LLVM_DIR=$llvmCMakeDir"
        cmake -B build -G "Visual Studio 17 2022" -A x64 -DLLVM_DIR="$llvmCMakeDir" -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build build --config Release