name: CI

on:
  push:
#    tags:
#      - '*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        llvm: [17]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup LLVM ${{ matrix.llvm }}
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: ${{ matrix.llvm }}
          directory: ${{ runner.temp }}/llvm

      - name: Add LLVM to PATH
        shell: bash
        run: echo "${{ runner.temp }}/llvm/bin" >> $GITHUB_PATH

      - name: Show clang version
        run: clang --version

      - name: Configure (CMake + Ninja) [Windows]
        if: matrix.os == 'windows-latest'
        shell: pwsh
        env:
          CC: clang
          CXX: clang++
        run: |
          # Prefer action-provided LLVM_PATH; fallback to runner.temp
          $llvmDir = if ($env:LLVM_PATH) { $env:LLVM_PATH } else { Join-Path $env:RUNNER_TEMP 'llvm' }
          # Try standard path first
          $candidate = Join-Path $llvmDir 'lib\cmake\llvm'
          if (-Not (Test-Path (Join-Path $candidate 'LLVMConfig.cmake'))) {
            # Fallback: search recursively for LLVMConfig.cmake
            $found = Get-ChildItem -Path $llvmDir -Recurse -Filter 'LLVMConfig.cmake' -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($null -ne $found) {
              $candidate = Split-Path -Parent $found.FullName
            } else {
              Write-Host "Could not locate LLVMConfig.cmake under $llvmDir"
              Get-ChildItem -Path $llvmDir -Recurse -Depth 2 -ErrorAction SilentlyContinue | Select-Object -First 100 | ForEach-Object { $_.FullName }
              throw "LLVMConfig.cmake not found"
            }
          }
          $llvmDirNorm = $llvmDir -replace '\\','/'
          $llvmCMakeNorm = $candidate -replace '\\','/'
          Write-Host "LLVM_DIR=$llvmCMakeNorm"
          Write-Host "CMAKE_PREFIX_PATH=$llvmDirNorm"
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR="$llvmCMakeNorm" -DCMAKE_PREFIX_PATH="$llvmDirNorm"

      - name: Configure (CMake + Ninja) [Unix]
        if: matrix.os != 'windows-latest'
        shell: bash
        env:
          CC: clang
          CXX: clang++
        run: |
          LLVM_DIR_PATH="${{ runner.temp }}/llvm/lib/cmake/llvm"
          PREFIX_PATH="${{ runner.temp }}/llvm"
          echo "LLVM_DIR_PATH=$LLVM_DIR_PATH"
          echo "CMAKE_PREFIX_PATH=$PREFIX_PATH"
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR="$LLVM_DIR_PATH" -DCMAKE_PREFIX_PATH="$PREFIX_PATH"

      - name: Build
        run: cmake --build build --config Release -- -v

      - name: Bundle LLVM runtime (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path build\bundle | Out-Null
          $src = Join-Path $env:RUNNER_TEMP 'llvm\bin'
          Get-ChildItem $src -Filter '*.dll' | Where-Object { $_.Name -match 'LLVM|clang' } | Copy-Item -Destination build\bundle -Force

      - name: Bundle LLVM runtime (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          mkdir -p build/bundle
          cp -f ${{ runner.temp }}/llvm/lib/libLLVM*.dylib build/bundle 2>/dev/null || true
          cp -f ${{ runner.temp }}/llvm/lib/libclang*.dylib build/bundle 2>/dev/null || true

      - name: Bundle LLVM runtime (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          mkdir -p build/bundle
          cp -f ${{ runner.temp }}/llvm/lib/libLLVM*.so build/bundle 2>/dev/null || true
          cp -f ${{ runner.temp }}/llvm/lib/libclang*.so* build/bundle 2>/dev/null || true

      - name: Upload stc artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stc-${{ matrix.os }}
          path: |
            build/stc*
            build/Release/stc.exe
            build/**/stc*
            build/bundle/**
