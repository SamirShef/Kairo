name: CI

on:
  push #:
#    tags:
#      - 'v*'
#  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build ccache

    - name: Install LLVM 20
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        echo "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main" | sudo tee /etc/apt/sources.list.d/llvm.list
        sudo apt-get update
        sudo apt-get install -y llvm-20-dev clang-20

    - name: Create Build Directory
      run: mkdir -p build

    - name: Configure CMake
      run: |
        cmake -G Ninja -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_DIR=$(llvm-config-20 --cmakedir) \
          -DCMAKE_C_COMPILER=clang-20 \
          -DCMAKE_CXX_COMPILER=clang++-20 \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build
      run: cmake --build build --config Release -- -k 0
  
  windowsBuild:
      name: Windows Build
      runs-on: windows-2022
      env:
          LLVM_VERSION: 20.1.0
          SCCACHE_CACHE_SIZE: 5G
          SCCACHE_DIR: C:\\Users\\runneradmin\\sccache
      steps:
      -   name: Checkout repo
          uses: actions/checkout@v4

      -   name: Enable sccache
          uses: mozilla-actions/sccache-action@v0.0.3

      -   name: Install Ninja
          shell: pwsh
          run: choco install ninja --no-progress -y

      -   name: Download LLVM ${{ env.LLVM_VERSION }} (prebuilt)
          shell: pwsh
          run: |
              $url = "https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ env.LLVM_VERSION }}/LLVM-${{ env.LLVM_VERSION }}-win64.exe"
              $out = "$env:RUNNER_TEMP\llvm-${{ env.LLVM_VERSION }}.exe"
              Invoke-WebRequest -Uri $url -OutFile $out
              New-Item -ItemType Directory -Force -Path "C:\\llvm" | Out-Null
              & 7z x $out -oC:\\llvm -y | Out-Null
              echo "LLVM extracted to C:\\llvm"

      -   name: Configure CMake (Release)
          shell: pwsh
          run: |
              $llvmConfig = Get-ChildItem -Path "C:\\llvm" -Recurse -Filter "LLVMConfig.cmake" -File -ErrorAction SilentlyContinue | Select-Object -First 1
              if (-not $llvmConfig) { throw "Failed to locate LLVMConfig.cmake under C:\\llvm" }
              $env:LLVM_DIR = $llvmConfig.DirectoryName
              cmake -G Ninja -S . -B build `
                -DCMAKE_BUILD_TYPE=Release `
                -DLLVM_DIR=$env:LLVM_DIR `
                -DCMAKE_C_COMPILER=cl `
                -DCMAKE_CXX_COMPILER=cl `
                -DCMAKE_C_COMPILER_LAUNCHER=sccache `
                -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

      -   name: Build
          shell: pwsh
          run: cmake --build build --config Release -- -k 0